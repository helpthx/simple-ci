# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    
    - shell: bash
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        PG_PASS: ${{ secrets.PG_PASS }}
        API_DB_USER: ${{ secrets.API_DB_USER }}
        API_DB_PASS: ${{ secrets.API_DB_PASS }}
        API_DB_DATABASE: ${{ secrets.API_DB_DATABASE }}
        DATABASE_URL: postgres://"$API_DB_USER":"$API_DB_PASS"@db_postgres:5432/"$API_DB_DATABASE"

      run: |
          echo SECRET_KEY="$SECRET_KEY" >> .env
          echo DATABASE_URL="$DATABASE_URL" >> .env
          echo PG_PASS="$PG_PASS" >> .env
          
    - name: Building containers
      run: |
          export API_DB_USER="$API_DB_USER"
          export API_DB_PASS="$API_DB_PASS"
          export API_DB_DATABASE="$API_DB_DATABASE"

    - name: Building containers
      run: make build
      
    - name: Starting PostgreSQL
      run: docker-compose up -d db_postgres
           
    - name: Sleep Action 15s to wait postgres upping
      uses: juliangruber/sleep-action@v1.0.1
      with:
        time: '15s'
    
    - name: Creating roles for PostgreSQL
      run: docker exec db_postgres psql -U postgres -c "CREATE ROLE ${API_DB_USER} LOGIN ENCRYPTED PASSWORD '${API_DB_PASS}' NOSUPERUSER INHERIT CREATEDB NOCREATEROLE NOREPLICATION;"
      
    - name: Alter roles for PostgreSQL
      run: docker exec db_postgres psql -U postgres -c "ALTER ROLE ${API_DB_USER}" VALID UNTIL 'infinity; ALTER USER ${API_DB_USER} CREATEDB;"
      
    - name: Creating Database for PostgreSQL
      run: docker exec db_postgres psql -U postgres -c "CREATE DATABASE ${API_DB_DATABASE} WITH OWNER = ${API_DB_USER} ENCODING = 'UTF8' TABLESPACE = pg_default LC_COLLATE = 'en_US.UTF-8' LC_CTYPE = 'en_US.UTF-8' CONNECTION LIMIT = -1 TEMPLATE template0;"
      
    - name: Run Unit Test
      run: docker-compose run --rm api_simple /simple-ci/run-test.sh

    
